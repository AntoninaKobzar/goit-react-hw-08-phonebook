{"version":3,"file":"static/js/846.1ea6d797.chunk.js","mappings":"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","sources":["redux/contacts/contactsSelectors.js","webpack://react-homework-template/./src/components/ContactForm/ContactForm.module.css?b5b2","components/ContactForm/ContactForm.jsx","webpack://react-homework-template/./src/components/ContactList/ContactList.module.css?1ce0","webpack://react-homework-template/./src/components/ContactItem/ContactItem.module.css?be2b","components/ContactItem/ContactItem.jsx","components/ContactList/ContactList.jsx","webpack://react-homework-template/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","webpack://react-homework-template/./src/components/App.module.css?6c4d","pages/Contacts.js"],"sourcesContent":["export const getContacts = state => state.contacts.items;\nexport const getIsLoading = state => state.contacts.isLoading;\nexport const getError = state => state.contacts.error;\nexport const getFilterValue = state => state.filter;\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"ContactForm_form__dhl+T\",\"form__label\":\"ContactForm_form__label__8W82B\",\"form__input\":\"ContactForm_form__input__VGD4-\",\"form__button\":\"ContactForm_form__button__MT1Jk\"};","import { nanoid } from 'nanoid';\nimport css from './ContactForm.module.css';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { addContact } from 'redux/contacts/contactsOperations';\nimport { getContacts } from 'redux/contacts/contactsSelectors';\nimport Notiflix from 'notiflix';\n\nexport const ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(getContacts);\n\n  const onFormSubmit = e => {\n    e.preventDefault();\n    const inputName = e.currentTarget.name.value;\n    const inputNumber = e.currentTarget.number.value;\n    const data = {\n      id: nanoid(),\n      name: inputName,\n      number: inputNumber,\n    };\n    const normalizedFilter = inputName.toLowerCase();\n    const stateNameArray = contacts.map(({ name }) => name.toLowerCase());\n    !stateNameArray.includes(normalizedFilter)\n      ? dispatch(addContact(data))\n      : Notiflix.Notify.failure(`${data.name} is already in contacts.`);\n    e.currentTarget.reset();\n  };\n\n  return (\n    <form className={css.form} onSubmit={onFormSubmit}>\n      <label>\n        <p className={css.form__label}>Name</p>\n        <input\n          className={css.form__input}\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. \n                        For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n        />\n      </label>\n      <label>\n        <p className={css.form__label}>Number</p>\n        <input\n          className={css.form__input}\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n        />\n      </label>\n      <button type=\"submit\" className={css.form__button}>\n        Add contact\n      </button>\n    </form>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"ContactList_list__csErn\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"ContactItem_item__gxreB\",\"button\":\"ContactItem_button__IRFBz\",\"number\":\"ContactItem_number__mfZ8x\"};","import PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/contactsOperations';\nimport css from './ContactItem.module.css';\n\nexport const ContactItem = ({ name, number, contactId }) => {\n  const dispatch = useDispatch();\n\n  const onDeleteContact = () => {\n    dispatch(deleteContact(contactId));\n  };\n  return (\n    <li className={css.item}>\n      <span className={css.item}>{name}: </span>\n      <a href={`tel:${number}`} className={css.number}>\n        {number}\n      </a>\n      <button\n        type=\"button\"\n        className={css.button}\n        onClick={() => onDeleteContact()}\n      >\n        Delete\n      </button>\n    </li>\n  );\n};\n\nContactItem.propTypes = {\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n  contactId: PropTypes.string.isRequired,\n};\n","import { useSelector } from 'react-redux';\nimport css from './ContactList.module.css';\nimport { ContactItem } from '../ContactItem/ContactItem';\nimport { getContacts, getFilterValue } from 'redux/contacts/contactsSelectors';\n\nexport const ContactList = () => {\n  const contacts = useSelector(getContacts);\n  const filter = useSelector(getFilterValue);\n\n  const getfilteredContacts = () => {\n    const normalizedFilter = filter.toLowerCase();\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter)\n    );\n  };\n\n  return (\n    <>\n      <ul className={css.list}>\n        {getfilteredContacts().map(({ id, name, number }) => {\n          return (\n            <ContactItem key={id} name={name} number={number} contactId={id} />\n          );\n        })}\n      </ul>\n    </>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"form__input\":\"Filter_form__input__ERjnq\",\"form__label\":\"Filter_form__label__P7S9i\"};","import { useDispatch } from 'react-redux';\nimport { setFilter } from '../../redux/contacts/filterSlice';\nimport css from './Filter.module.css';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n\n  const onFilterChange = e => dispatch(setFilter(e.currentTarget.value));\n  return (\n    <label>\n      <p className={css.form__label}>Find contacts by name</p>\n      <input\n        className={css.form__input}\n        type=\"text\"\n        name=\"filter\"\n        onChange={onFilterChange}\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        required\n      ></input>\n    </label>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"App_container__ZdBeZ\"};","import { useEffect } from 'react';\nimport { getIsLoading, getError } from 'redux/contacts/contactsSelectors';\nimport { ContactForm } from '../components/ContactForm/ContactForm';\nimport { ContactList } from '../components/ContactList/ContactList';\nimport { Filter } from '../components/Filter/Filter';\nimport css from '../components/App.module.css';\nimport { fetchContacts } from 'redux/contacts/contactsOperations';\nimport { useDispatch, useSelector } from 'react-redux';\n\nconst Contacts = () => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(getIsLoading);\n  const error = useSelector(getError);\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n  return (\n    <div className={css.container}>\n      <h1>Phonebook</h1>\n      <ContactForm />\n      <h2>Contacts</h2>\n      <Filter />\n      {isLoading && !error && <b>{'Loading...'}</b>}\n      <ContactList />\n    </div>\n  );\n};\n\nexport default Contacts;\n"],"names":["getContacts","state","contacts","items","getIsLoading","isLoading","getError","error","getFilterValue","filter","ContactForm","dispatch","useDispatch","useSelector","className","css","onSubmit","e","preventDefault","inputName","currentTarget","name","value","inputNumber","number","data","id","nanoid","normalizedFilter","toLowerCase","map","includes","Notiflix","addContact","reset","type","pattern","title","required","ContactItem","contactId","href","onClick","deleteContact","ContactList","contact","getfilteredContacts","Filter","onChange","setFilter","useEffect","fetchContacts"],"sourceRoot":""}